tcg-runtime-sym.c
QEMU ha un parser del codice x86, cioè che disassembla un'istruzione e la traduce in tcg, generando delle nuove istruzioni.
symQEMU aggiunge, alle istruzioni costruite da QEMU, una call ad una macro chiamata DEF_HELPER_BINARY (Line 84) che definisce il corpo dell'helper associato ad una certa funzione.
Per farlo esegue due operazioni:
- invoca una macro chiamata DECL_HELPER_BINARY, che definisce il prototipo di una funzione chiamata helper_sym_##name##_i32/i64
- invoca un'altra macro chiamata HELPER_ENSURE_EXPRESSIONS, che verifica che ci sia almeno un parametro simbolico al momento dell'invocazione altrimenti non fa niente
- se c'è necessità di costruire un'espressione simbolica, viene invocata sym_build_##name## (si trova nel Runtime)


La definizione dell'helper associato alla ADD si trova alla riga 105.



tcg-op.h
Contiene il metodo che consente di costruire le chiamata TCG agli helper, ovvero la macro SYM_HELPER_BINARY_64 (Line 42)

Supponiamo che per modellare simbolicamente la add (a tempo runtime) vogliamo che venga invocata una funzione da noi scritta chiamata pippo(), cioè la funzione che andrà costrire l'espressione nel linguaggio di QSYM che, a sua volta,
andrà ad invocare i metodi della libreria Z3.
Per fare questo ho bisogno di un metodo che indichi a QEMU di aggiungere nel TCG una call all'helper che ci interessa venga eseguito.
Questa è la sola definizione dell'helper, il corpo viene definito in tcg-runtime-sym.c



tcg-runtime-sym.h
Contiene il metodo che scrive la definizione dell'helper, che viene effettuata tramite la macro SYM_HELPER_BINARY (Line 35)



RuntimeCommon.h
Contiene la dichiarazione di tutti i metodi, compresi alcuni float, e che contiene metodi utilizzabili sia dal Runtime-Simple di SymCC che da quello di QSYM.


Runtime.cpp
Contiene la definizione di quei metodi che non si trovano nel RuntimeCommon.h, quindi che non vanno bene per entrambi i Runtime.
La definizione de builder dell'esperssione simbolica si trova a riga 231, ed è definito tramite una macro DEF_BINAYR_EXPR_BUILDER, che invoca i metodi del Builder


SYMQEMU (basta rilanciare il make)
1) Modificare il codice in modo da generare la call all'helper e metterla dentro al codice TCG.		(tcg-op.h)
2) Definire ill generatore dell'helper, che deve aggiungere al codice TCG esistente una call all'helper simbolico della funzione	(tcg-op.h / tcg-runtime-sym.c)
3) Dichiarare e definire l'helper stesso: deve verificare che almeno uno degli operandi sia simbolico e, se ciò è verificato, invoca un metodo del runtime che sarà il builder simbolico (tcg-runtime-sym.c)


SYMCC con backend QSYM
4) Dichiarare il builder simbolico (RuntimeCommon.cpp)
5) Definire il corpo del builder, dove vengono invocati i metodi del builder di QSYM per cosstruire espressioni nel linguaggio QSYM (Runtime.cpp)


QSYM
6) Aggiungere le classi per la gestione dei FP ed i metodi che il builder invocherà per costruire le espressioni simboliche (expr-builder o giù di li)